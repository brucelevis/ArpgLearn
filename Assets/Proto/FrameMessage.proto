syntax = "proto3";
package ETModel;

message OneFrameMessage // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	int32 Op = 1;
	bytes AMessage = 2;
}

message FrameMessage // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	int32 Frame = 1;
	repeated OneFrameMessage Message = 2;
}

message PeerInfo
{
	string PlayerName = 1;
	int32 InputAssignment = 2;
}

message MoveInfo
{
	int32 posX = 1;
	int32 posY = 2;
}

message UnitSnatshot
{
	int64 Id = 1;
	MoveInfo MoveComponentBytes = 2;
	int32 PlayerIndex = 3;
	PeerInfo Info = 4;
}

message UnitSnapshotMsg // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	repeated UnitSnatshot units = 1;
	int32 Frame = 2;
}

message ClientInitComplete //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
}

message SnapShotMessage //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	repeated UnitSnapshotMsg UnitMsg = 1;
}

message LocalNCFAndJLE //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	int32 NewestConsistentFrame = 1;
	int32 LatestJoinLeaveEvent = 2;
	//int32 CurrentHostId = 3;
	uint32 NCFSnapshot = 3;
}

message JoinEvent //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	repeated JoinLeaveEventMessage events = 1;
}

message JoinLeaveEventMessage //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	int32 EventId = 1;
	int32 ConsistentFrame = 2;
	uint32 FrameSubConsistemtFrame = 3;
	int32 InputIndex = 4;
	bool IfJoiningPlayerName = 5;
	string JoiningPlayerName = 6;
	bytes JoiningPlayerData = 7;
	repeated int32 Inputstate = 8;
}

message ConnectMessage //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	JoinLeaveEventMessage mConnectJLEMessage = 1;
	int32 SnapShotLength = 2;
	bytes SnapShotBytes = 3;
	OnlineStateBuffer mOnlineStateBuffer = 4;

}

message OnlineStateBuffer //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	int32 LastJoinFrame = 1;
	string mJoinPlayerName = 2;
	bytes mJoinPlayerData = 3;
	repeated int32 ConsistentFrame = 4;
	repeated string JoinPlayerName = 5;
	repeated bytes JoinPlayerData = 6;
	int32 Terminator = 7;
	MessageInputRLE MyMessageInputRLE = 8;
}

message InputHeader //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	bytes InputFormat = 1;
	int32 StartFrame = 2;
	int32 InputAssignment = 3;
}

message InputPredictionWarmValues //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	repeated bytes Inputstate = 1;
}

message C2SOnlyInputState //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	int32 Inputstate = 1;
}

message MessageInputRLE
{
	repeated int32 Count = 1;
	repeated int32 Inputstate = 2;	
}

message MessageInputCoalesced
{
	int32 FirstInputCount = 1;
	int32 FirstInput = 2;
	int32 LastInput = 3;
}

message MessageReceiveRemoteNCFAndJLE
{
	int32 receivedNCF = 1;
	int32 receivedJLE = 2;
	int32 receivedHash = 3;
}

message MessageReceiveDesyncDebug
{
	int32 receivedJLE = 1;
	int32 receivedStartFrame = 2;
	int32 receivedCount = 3;
	repeated bytes receivedSnapshots = 4;
}

message C2SInputMessage //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	int32 SequenceChannel = 1;
	bool IsRLE = 2;
	int32 Frame = 3;
	MessageInputRLE InputRLE = 4;
	MessageInputCoalesced InputCoalesced = 5;
	MessageReceiveRemoteNCFAndJLE ReceiveRemoteNCFAndJLE = 6;
	MessageReceiveDesyncDebug ReceiveDesyncDebug = 7;
}

message C2SCoalesceInput //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	int32 InputFormat = 1; //0为false 1为true
	int32 StartFrame = 2;
	uint32 FirstInputCount = 3;
	int32 FirstInputstateValue = 4;
	int32 LastInputstateValue = 5;
	int32 NewestConsistentFrame = 6;
	int32 LatestJoinLeaveEvent = 7;
	uint32 NCFSnapshot = 8;
	MessageInputRLE MyMessageInputRLE = 9;
}

message S2CCoalesceInput //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Time = 94;
	repeated int64 UnitID = 1;
	repeated C2SCoalesceInput mC2SCoalesceInputs = 2;
}