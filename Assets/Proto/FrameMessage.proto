syntax = "proto3";
package ETModel;

message OneFrameMessage // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int32 Op = 1;
	bytes AMessage = 2;
}

message FrameMessage // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;

	int32 Frame = 1;
	repeated OneFrameMessage Message = 2;
}

message PeerInfo
{
	string PlayerName = 1;
	int32 InputAssignment = 2;
}

message MoveInfo
{
	int32 posX = 1;
	int32 posY = 2;
}

message UnitSnatshot
{
	int64 Id = 1;
	MoveInfo MoveComponentBytes = 2;
	int32 PlayerIndex = 3;
	PeerInfo Info = 4;
}

message UnitSnapshotMsg // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	repeated UnitSnatshot units = 1;
	int32 Frame = 2;
}

message ClientInitComplete //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
}

message SnapShotMessage //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	repeated UnitSnapshotMsg UnitMsg = 1;
}

message LocalNCFAndJLE //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int32 NewestConsistentFrame = 1;
	int32 LatestJoinLeaveEvent = 2;
	//int32 CurrentHostId = 3;
	uint32 NCFSnapshot = 3;
}

message JoinEvent //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	repeated JoinLeaveEvent events = 1;
}

message JoinLeaveEvent //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int32 EventId = 1;
	int32 ConsistentFrame = 2;
	uint32 FrameSubConsistemtFrame = 3;
	int32 InputIndex = 4;
	int32 IfJoiningPlayerName = 5;
	string JoiningPlayerName = 6;
	bytes JoiningPlayerData = 7;
}

message OnlineState //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int32 LastJoinFrame = 1;
	repeated int32 ConsistentFrame = 2;
	repeated string JoinPlayerName = 3;
	repeated bytes JoinPlayerData = 4;
	int32 Terminator = 5;
}

message InputRLE //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	repeated int32 CurrentRunLength = 1;
	repeated bytes CurrentInputState = 2;
	int32 Terminator = 3;
}

message InputCoalesced //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	uint32 FirstInputCount = 1;
	bytes FirstInput = 2;
	bytes LastInput = 3;
}

message InputHeader //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	bytes InputFormat = 1;
	int32 StartFrame = 2;
	int32 InputAssignment = 3;
}

message InputPredictionWarmValues //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	repeated bytes Inputstate = 1;
}

message C2SOnlyInputState //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int32 Inputstate = 1;
}

message S2CCoalesceInput //IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int32 InputFormat = 1; //0为false 1为true
	int32 StartFrame = 2;
	uint32 FirstInputCount = 3;
	int32 FirstInputstateValue = 4;
	int32 LastInputstateValue = 5;
	int32 NewestConsistentFrame = 6;
	int32 LatestJoinLeaveEvent = 7;
	uint32 NCFSnapshot = 8;
}